org: lukejgaskell
app: represent
service: backend
useDotenv: true

frameworkVersion: "3"

plugins:
  - serverless-offline
  - serverless-domain-manager

custom:
  customDomain:
    domainName: api-represent.gaskellsolutions.com
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: "20201221"
  stage: prod
  region: us-east-1
  environment:
    SUPABASE_SERVICE_KEY: ${env:supabaseServiceKey}
    API_KEY: ${env:proPublicaAPIKey}
    GEOCODIO_TOKEN: ${env:geocodioAPIKey}

functions:
  syncVotes:
    runtime: nodejs14.x
    handler: ./syncs/votes-sync.handler.run
    timeout: 30
    events:
      - schedule: cron(0 12,20 ? * * *)
  syncMembers:
    runtime: nodejs14.x
    handler: ./syncs/members-sync.handler.run
    timeout: 30
    events:
      - schedule: cron(0 12 ? * * *)
  syncBills:
    runtime: nodejs14.x
    handler: ./syncs/bills-sync.handler.run
    timeout: 30
    events:
      - schedule: cron(45 11,19 ? * * *)
  syncStatements:
    runtime: nodejs14.x
    handler: ./syncs/statements-sync.handler.run
    timeout: 30
    events:
      - schedule: cron(0 12,20 ? * * *)
  syncMemberExpenses:
    runtime: nodejs14.x
    handler: ./syncs/member-expenses-sync.handler.run
    timeout: 60
    events:
      - schedule: cron(0 0 15 * ? *) # run 15th of every month at 12:00am
  getDistrict:
    runtime: nodejs14.x
    handler: ./api/find-district.handler.run
    events:
      - http:
          method: get
          path: getDistrict
